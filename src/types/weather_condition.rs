#[derive(Debug, PartialEq, Clone, Copy)]
pub enum WeatherCondition {
    Clear = 1,
    Fair = 2,
    Cloudy = 3,
    Overcast = 4,
    Fog = 5,
    FreezingFog = 6,
    LightRain = 7,
    Rain = 8,
    HeavyRain = 9,
    FreezingRain = 10,
    HeavyFreezingRain = 11,
    Sleet = 12,
    HeavySleet = 13,
    LightSnowfall = 14,
    Snowfall = 15,
    HeavySnowfall = 16,
    RainShower = 17,
    HeavyRainShower = 18,
    SleetShower = 19,
    HeavySleetShower = 20,
    SnowShower = 21,
    HeavySnowShower = 22,
    Lightning = 23,
    Hail = 24,
    Thunderstorm = 25,
    HeavyThunderstorm = 26,
    Storm = 27,
}

impl WeatherCondition {
    pub fn from_i64(value: i64) -> Option<Self> {
        match value {
            1 => Some(WeatherCondition::Clear),
            2 => Some(WeatherCondition::Fair),
            3 => Some(WeatherCondition::Cloudy),
            4 => Some(WeatherCondition::Overcast),
            5 => Some(WeatherCondition::Fog),
            6 => Some(WeatherCondition::FreezingFog),
            7 => Some(WeatherCondition::LightRain),
            8 => Some(WeatherCondition::Rain),
            9 => Some(WeatherCondition::HeavyRain),
            10 => Some(WeatherCondition::FreezingRain),
            11 => Some(WeatherCondition::HeavyFreezingRain),
            12 => Some(WeatherCondition::Sleet),
            13 => Some(WeatherCondition::HeavySleet),
            14 => Some(WeatherCondition::LightSnowfall),
            15 => Some(WeatherCondition::Snowfall),
            16 => Some(WeatherCondition::HeavySnowfall),
            17 => Some(WeatherCondition::RainShower),
            18 => Some(WeatherCondition::HeavyRainShower),
            19 => Some(WeatherCondition::SleetShower),
            20 => Some(WeatherCondition::HeavySleetShower),
            21 => Some(WeatherCondition::SnowShower),
            22 => Some(WeatherCondition::HeavySnowShower),
            23 => Some(WeatherCondition::Lightning),
            24 => Some(WeatherCondition::Hail),
            25 => Some(WeatherCondition::Thunderstorm),
            26 => Some(WeatherCondition::HeavyThunderstorm),
            27 => Some(WeatherCondition::Storm),
            _ => None, // Return None for invalid values
        }
    }
}